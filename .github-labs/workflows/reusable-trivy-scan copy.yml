# Reusable workflow for scanning the filesystem with Trivy
name: Reusable Trivy FS Scan

on:
  # This makes the workflow reusable by other workflows
  workflow_call:
    inputs:
      # Defines which severities should fail the workflow.
      # Options: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      severity:
        description: 'Severities to fail on'
        required: false
        type: string
        default: 'LOW,MEDIUM,HIGH,CRITICAL'
      # Defines what to scan for. vuln=vulnerabilities, config=misconfigurations, secret=exposed secrets
      security-checks:
        description: 'Types of security checks to perform'
        required: false
        type: string
        default: 'vuln,secret'

jobs:
  trivy-filesystem-scan:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Run Trivy vulnerability scanner on the filesystem
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          # Scan the entire repository filesystem
          scan-type: 'fs'
          scan-ref: '.'
          
          # Define which severities to report on
          severity: ${{ inputs.severity }}
          
          # Define which security issues to detect (vulnerabilities, secrets, etc.)
          security-checks: ${{ inputs.security-checks }}
          
          # Make the job fail if vulnerabilities of the specified severity are found
          exit-code: '0'
          
          # Output the results in SARIF format for GitHub integration
          format: 'sarif'
          output: 'trivy-results.sarif'
          
          # Ignore vulnerabilities that don't have a fix yet
          ignore-unfixed: false

      # Step 3: Upload the SARIF file to the GitHub Security tab
      # This provides a nice UI for viewing vulnerabilities under your repo's "Security" > "Code scanning" tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        # Use if: always() to ensure this step runs even if the previous step fails (so you always get a report)
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
