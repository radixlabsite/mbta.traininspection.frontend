name: ‚öôÔ∏è Build & Deploy to S3 - Development

on:
  workflow_dispatch: {} # Permite execu√ß√£o manual
  push:
    branches:
      - develop

env:
  YARN_CACHE_FOLDER: .yarn

permissions:
  id-token: write # Required for OIDC
  contents: read

jobs:
  build:
    name: üèóÔ∏è Build Frontend Applications
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 18.20.2
        uses: actions/setup-node@v4
        with:
          node-version: "18.20.2"

      - name: Install Yarn 1.22.19
        run: npm install -g yarn@1.22.19

      - name: Cache Yarn packages
        uses: actions/cache@v4
        with:
          path: ${{ env.YARN_CACHE_FOLDER }}
          key: yarn-${{ runner.os }}-${{ hashFiles('src/yarn.lock') }}
          restore-keys: |
            yarn-${{ runner.os }}-
            yarn-

      - name: Install mobile dependencies
        run: |
          cd src/apps/mobile
          yarn install

      - name: Build mobile
        run: |
          cd src/apps/mobile
          export NEXT_PUBLIC_ENTRA_CLIENT_ID="${{ vars.ENTRA_CLIENT_ID }}"
          export NEXT_PUBLIC_ENTRA_AUTHORITY="${{ vars.ENTRA_AUTHORITY }}"
          export NEXT_PUBLIC_ENTRA_REDIRECT_URI="${{ vars.ENTRA_REDIRECT_URI }}"
          export NEXT_PUBLIC_ENTRA_POST_LOGOUT_URI="${{ vars.ENTRA_POST_LOGOUT_URI }}"
          export NEXT_PUBLIC_ENTRA_SCOPE_BACKEND="${{ vars.ENTRA_SCOPE_BACKEND }}"
          export NEXT_PUBLIC_API_BASE_URL="${{ vars.API_BASE_URL }}"
          yarn build

      - name: Install web dependencies
        run: |
          cd src/apps/web
          yarn install

      - name: Build web
        run: |
          cd src/apps/web
          export NEXT_PUBLIC_ENTRA_CLIENT_ID="${{ vars.ENTRA_CLIENT_ID }}"
          export NEXT_PUBLIC_ENTRA_AUTHORITY="${{ vars.ENTRA_AUTHORITY }}"
          export NEXT_PUBLIC_ENTRA_REDIRECT_URI="${{ vars.ENTRA_REDIRECT_URI }}"
          export NEXT_PUBLIC_ENTRA_POST_LOGOUT_URI="${{ vars.ENTRA_POST_LOGOUT_URI }}"
          export NEXT_PUBLIC_ENTRA_SCOPE_BACKEND="${{ vars.ENTRA_SCOPE_BACKEND }}"
          export NEXT_PUBLIC_API_BASE_URL="${{ vars.API_BASE_URL }}"
          yarn build

      - name: Upload mobile artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mobile-drop
          path: src/apps/mobile/out

      - name: Upload web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-drop
          path: src/apps/web/out

  upload-to-s3:
    name: ‚òÅÔ∏è Upload Build Artifacts to S3
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10
    environment: dev

    steps:
      - name: Download mobile artifacts
        uses: actions/download-artifact@v4
        with:
          name: mobile-drop
          path: ./mobile

      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-drop
          path: ./web

      - name: List downloaded artifacts
        run: |
          echo "üìÅ Listing contents of mobile:"
          ls -R ./mobile || echo "No files found or directory missing"

          echo "üìÅ Listing contents of web:"
          ls -R ./web || echo "No files found or directory missing"

      - name: Configure AWS credentials  via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Verify AWS access
        run: aws sts get-caller-identity

      - name: Upload MOBILE to S3
        run: |
          aws s3 cp --recursive ./mobile/ s3://${{ vars.BUCKET_NAME_MOBILE }}/

      - name: Upload WEB to S3
        run: |
          aws s3 cp --recursive ./web/ s3://${{ vars.BUCKET_NAME_WEB }}/

  invalidate-cloudfront:
    name: üöÄ Invalidate CloudFront Cache
    runs-on: ubuntu-latest
    needs: upload-to-s3
    environment: dev
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ vars.CF_DISTRIBUTION_ID }} \
            --paths "/*"
