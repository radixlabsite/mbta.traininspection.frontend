name: Reusable Build & Deploy

# Permite que este workflow seja chamado por outro workflow
on:
  workflow_call:
    inputs:
      environment-name:
        description: 'Reusable Build & Deploy (dev, prd)'
        required: true
        type: string
    secrets:
      AWS_ROLE_TO_ASSUME:
        description: 'O ARN do Role da AWS para assumir'
        required: true

env:
  YARN_CACHE_FOLDER: .yarn
  NODE_VERSION: "18.20.2"
  YARN_VERSION: "1.22.19"

permissions:
  id-token: write # Necess√°rio para autentica√ß√£o OIDC com a AWS
  contents: read

jobs:
  build:
    name: üèóÔ∏è Build Frontend Applications
    runs-on: ubuntu-latest
    # Usa o nome do ambiente passado como input
    environment: ${{ inputs.environment-name }}
    
    # Mapeia as vari√°veis de ambiente do GitHub para as vari√°veis da aplica√ß√£o
    # Isso evita repeti√ß√£o e centraliza a configura√ß√£o.
    env:
      NEXT_PUBLIC_ENTRA_CLIENT_ID: ${{ vars.ENTRA_CLIENT_ID }}
      NEXT_PUBLIC_ENTRA_AUTHORITY: ${{ vars.ENTRA_AUTHORITY }}
      NEXT_PUBLIC_ENTRA_REDIRECT_URI: ${{ vars.ENTRA_REDIRECT_URI }}
      NEXT_PUBLIC_ENTRA_POST_LOGOUT_URI: ${{ vars.ENTRA_POST_LOGOUT_URI }}
      NEXT_PUBLIC_ENTRA_SCOPE_BACKEND: ${{ vars.ENTRA_SCOPE_BACKEND }}
      NEXT_PUBLIC_API_BASE_URL: ${{ vars.API_BASE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Yarn ${{ env.YARN_VERSION }}
        run: npm install -g yarn@${{ env.YARN_VERSION }}

      - name: Cache Yarn packages
        uses: actions/cache@v4
        with:
          path: ${{ env.YARN_CACHE_FOLDER }}
          # A chave do cache deve ser baseada no lock file correto
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-${{ runner.os }}-
            yarn-

      - name: Install dependencies (Mobile & Web)
        run: |
          cd src/apps/mobile && yarn install
          cd ../../.. # Volta para a raiz
          cd src/apps/web && yarn install

      - name: Build mobile
        run: cd src/apps/mobile && yarn build

      - name: Build web
        run: cd src/apps/web && yarn build

      - name: Upload mobile artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mobile-drop
          path: src/apps/mobile/out

      - name: Upload web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-drop
          path: src/apps/web/out

  deploy:
    name: üöÄ Deploy to AWS
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10
    # Usa o nome do ambiente e seus secrets/vars associados
    environment: ${{ inputs.environment-name }}

    steps:
      - name: Download mobile artifacts
        uses: actions/download-artifact@v4
        with:
          name: mobile-drop
          path: ./mobile

      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-drop
          path: ./web

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Usa o secret passado para o workflow
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Verify AWS access
        run: aws sts get-caller-identity

      - name: Upload MOBILE to S3
        run: aws s3 sync ./mobile/ s3://${{ vars.BUCKET_NAME_MOBILE }}/ --delete

      - name: Upload WEB to S3
        run: aws s3 sync  ./web/ s3://${{ vars.BUCKET_NAME_WEB }}/ --delete

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ vars.CF_DISTRIBUTION_ID }} \
            --paths "/*"
